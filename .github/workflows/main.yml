on: ["push", "pull_request", "workflow_dispatch"]

jobs:
  build_wheels:
    runs-on: "${{ matrix.os == 'wasm' && 'ubuntu-latest' || matrix.os }}"
    container:  # More up to date system software? TODO: Auto-update
      image: "archlinux/archlinux:base-devel-20250611.0.363423"
      options: "--workdir /workspace"
    strategy:
      fail-fast: false
      matrix:
        os: ["wasm"] # TODO (fail with missing symbols on native): ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-13, macos-14
        build_type: ["Release", "Debug"]
    steps:
      - uses: "actions/checkout@v4"
      
      - uses: "actions/cache@v4"
        id: "cache"
        with:
          path: |
            ./build
            !./build/*/_deps/*-src
            ~/.cache/ccache
          key: "${{ matrix.os }}-${{ matrix.build_type }}-cibuildwheel-${{ github.ref_name }}-${{ hashFiles('CMakeLists.txt', '*.cmake', 'pyproject.toml', '*.py') }}"
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.build_type }}-cibuildwheel-${{ github.ref_name }}-
            ${{ matrix.os }}-${{ matrix.build_type }}-cibuildwheel-master-
            ${{ matrix.os }}-${{ matrix.build_type }}-cibuildwheel-
      
      - run: |
          pacman -Syu --noconfirm python-pip git
          python -m venv .venv
          . .venv/bin/activate
          pip install cibuildwheel
          cibuildwheel
        env:
          CIBW_PLATFORM: "${{ matrix.os == 'wasm' && 'pyodide' || 'auto' }}"
          SKBUILD_CMAKE_BUILD_TYPE: "${{ matrix.build_type }}"
          SKBUILD_BUILD_TOOL_ARGS: "-d;explain" # Useful to debug if caches are not working as expected
        timeout-minutes: 310 # This ensures that the following steps are run even if builds take way too long (mainly uploading caches for faster future builds!)

      - uses: "actions/upload-artifact@v4"
        with:
          name: "cibw-wheels-${{ matrix.os }}-${{ matrix.build_type }}"
          path: "wheelhouse/*.whl"
          
      - if: "failure()" # Save cache even on failures
        uses: "actions/cache/save@v4"
        with:
          key: "${{ steps.cache.outputs.cache-primary-key }}"
          path: |
            ./build
            !./build/*/_deps/*-src
            ~/.cache/ccache

      - if: "always()"  # Upload cache as an artifact for debugging
        uses: "actions/upload-artifact@v4"
        with:
          name: "cache-${{ matrix.os }}-${{ matrix.build_type }}"
          include-hidden-files: true
          path: |
            ./build
            !./build/*/_deps/*-src
            ~/.cache/ccache
          
  deploy_wheels_to_pages: # keeping old ones
    needs: "build_wheels"
    if: "github.ref == 'refs/heads/master'"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v4"
        with:
          ref: "gh-pages"
          lfs: true  # Enable LFS fetching during checkout
      
      - uses: "actions/download-artifact@v4"  # Overwrites matching versions
        with:
          path: "."
          
      - name: "Rebuild index of registry"
        run: |
          rm -r cache-* # Cache artifacts are not wanted
          echo "<!DOCTYPE html><html><head><title>OCP wasm registry</title></head><body><h1>OCP wasm PEP503 registry</h1>" >index.html
          find . -type f -name "*.whl" | sort -u | while read -r file; do
            echo "<a href=\"${file#./}\">${file#./}</a><br/>" >>index.html
          done
          echo "</body></html>" >>index.html

      - name: "Commit and push"
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git lfs track "*.whl"  # Ensure LFS is tracking all wheel files (large debug builds)
          git add -v .
          git commit -m "Update wheel registry" || echo "No changes to commit"
          git push origin gh-pages


  # TODO: deploy_wheels_to_pypi: (doesn't support webassembly)
