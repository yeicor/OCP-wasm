on: [ "push", "pull_request", "workflow_dispatch" ]

jobs:
  build_wheels:
    runs-on: "${{ matrix.os == 'wasm' && 'ubuntu-latest' || matrix.os }}"
    container:
      image: "archlinux/archlinux:base-devel-20250614.0.365658"
      options: "--workdir /workspace"
    strategy:
      fail-fast: false
      matrix:
        package: [ "cadquery-ocp", "lib3mf" ]
        os: [ "wasm" ] # TODO (builds but fails testing with missing symbols on native): ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-13, macos-14
        build_type: [ "Release", "Debug" ]
    steps:
      - run: pacman -Syu --noconfirm git && git config --global --add safe.directory '*'
      - uses: "actions/checkout@v4"

      - uses: "actions/cache@v4"
        id: "cache"
        with:
          path: |
            ${{ matrix.package }}/build
            !${{ matrix.package }}/build/*/_deps/*-src
            ~/.cache/ccache
            ${{ matrix.package }}/wheelhouse/*.whl
          key: "cibw-${{ matrix.package }}-${{ matrix.os }}-${{ matrix.build_type }}-${{ github.ref_name }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake', '**/pyproject.toml', '**/*.py') }}"
          restore-keys: |
            cibw-${{ matrix.package }}-${{ matrix.os }}-${{ matrix.build_type }}-${{ github.ref_name }}-
          # cibw-${{ matrix.package }}-${{ matrix.os }}-${{ matrix.build_type }}-master-
          # cibw-${{ matrix.package }}-${{ matrix.os }}-${{ matrix.build_type }}-

      - id: "wheel_up_to_date"
        run: | # Detect if the version built in the cache is already good enough and skip (waiting on https://github.com/pypa/cibuildwheel/issues/2454)
          last_wheel_date=$(stat --format %Y ${{ matrix.package }}/wheelhouse/*.whl | sort -n | tail -n 1)
          echo "Last wheel date: $(date -d @$last_wheel_date)"
          last_sources_date=$(git log -1 --format=%cd --date=unix -- ${{ matrix.package }})
          echo "Last sources date: $(date -d @$last_sources_date)"
          git log -1 -- ${{ matrix.package }} # Show the last commit message modifying sources for debugging
          # TODO: More robust checks like the version of cibuildwheel (which could mean more pyodide versions), etc.
          #       As a workaround, I disabled the inter-branch caching for now
          if [ "$last_wheel_date" -gt "$last_sources_date" ]; then
            echo "Skipping build, cached artifact should be up to date! (${last_wheel_date} > ${last_sources_date})"
            echo "skip_build=true" >>"$GITHUB_OUTPUT"
          fi

      - working-directory: "${{ matrix.package }}"
        if: "steps.wheel_up_to_date.outputs.skip_build != 'true'"
        run: | # Install all system deps
          pacman -Syu --noconfirm python-pip
          python -m venv .venv
          . .venv/bin/activate
          pip install $(python -c 'import tomllib; cfg = tomllib.load(open("pyproject.toml", "rb")); print(*cfg["build-system"]["requires"])')
          pip install -r ../requirements-ci.txt

      - run: ". .venv/bin/activate && cibuildwheel"
        working-directory: "${{ matrix.package }}"
        if: "steps.wheel_up_to_date.outputs.skip_build != 'true'"
        env:
          CIBW_PLATFORM: "${{ matrix.os == 'wasm' && 'pyodide' || 'auto' }}"
          SKBUILD_CMAKE_BUILD_TYPE: "${{ matrix.build_type }}"
          SKBUILD_BUILD_TOOL_ARGS: "-d;explain" # Useful to debug if caches are not working as expected
          CFLAGS: "${{ matrix.build_type == 'Debug' && '-Og -g' || '-O3' }}"
          CXXFLAGS: "${{ matrix.build_type == 'Debug' && '-Og -g' || '-O3' }}"
          LDFLAGS: "${{ matrix.build_type == 'Debug' && '-Og -g -gsource-map=inline -gseparate-dwarf' || '-O1' }}" # XXX: See repair_wasm.py invocation in CMakeLists.txt
          _FORCE_OLD_SOURCES: "TRUE" # XXX: Force old sources for the caches to be effective (CI-only issue due to redownloading of sources as it sometimes fails if sources are cached)
        timeout-minutes: 310 # This ensures that the following steps are run even if builds take way too long (mainly uploading caches for faster future builds!)

      - uses: "actions/upload-artifact@v4"
        with:
          name: "wheel-${{ matrix.package }}-${{ matrix.os }}-${{ matrix.build_type }}"
          path: "${{ matrix.package }}/wheelhouse/*.whl"

      - if: "failure()" # Save cache even on failures
        uses: "actions/cache/save@v4"
        with:
          key: "${{ steps.cache.outputs.cache-primary-key }}"
          path: |
            ${{ matrix.package }}/build
            !${{ matrix.package }}/build/*/_deps/*-src
            ~/.cache/ccache
            ${{ matrix.package }}/wheelhouse/*.whl

      - if: "always()"  # Upload cache and wheels as an artifact for debugging
        uses: "actions/upload-artifact@v4"
        with:
          name: "cache-${{ matrix.package }}-${{ matrix.os }}-${{ matrix.build_type }}"
          include-hidden-files: true
          path: |
            ${{ matrix.package }}/build
            !${{ matrix.package }}/build/*/_deps/*-src
            ~/.cache/ccache
            /tmp/cibw-run-*/*-pyodide_wasm32/built_wheel/*
            /tmp/cibw-run-*/*-pyodide_wasm32/repaired_wheel/*
            ${{ matrix.package }}/wheelhouse/*.whl

  build_package_index:
    needs: "build_wheels"
    runs-on: "ubuntu-24.04"
    steps:
      - uses: "actions/checkout@v4"
        with:
          ref: "gh-pages"

      - uses: "actions/download-artifact@v4"
        with:
          pattern: "wheel-*"
          path: "_wheels"

      - run: |
          wget "https://raw.githubusercontent.com/yeicor/OCP.wasm/${{github.ref}}/util/package_index.py" -O _package_index.py
          find # For debugging
          python3 _package_index.py --wheels . _wheels --output .  # Overwrites matching versions (warnings are ok!)
          rm -rf _wheels _package_index.py

      - uses: "actions/upload-artifact@v4"
        with:
          name: "package-index"
          path: "."

  test_build123d_integration: # Test build123d integration using the wheels and package index generated above
    needs: "build_package_index"
    runs-on: "ubuntu-24.04"
    steps:
      - uses: "actions/checkout@v4"

      - uses: "actions/download-artifact@v4"
        with:
          name: "package-index"
          path: "package-index"

      - working-directory: "build123d"
        run: |
          set -ex 
          
          # Update package index links to point to the local files
          to_remove="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          package_index_file_url="file://$(realpath $(pwd)/package-index/)"
          find ../package-index -type f -exec sed -i "s|${to_remove}|${package_index_file_url}|g" {} \;
          
          # Set up the Pyodide test environment
          pip install -r requirements-pyodide.txt
          pyodide --version
          # TODO: Use latest released version instead of prerelease by adding |not to .prerelease (once cadquery-ocp supports it!)
          latest_pyodide_prerelease=$(curl -s "https://api.github.com/repos/pyodide/pyodide/releases" | 
            jq -r '.[] | select(.prerelease) | .tag_name' | sort -V | tail -n 1)
          pyodide xbuildenv install $latest_pyodide_prerelease
          pyodide xbuildenv versions
          pyodide venv .venv-pyodide
          . .venv-pyodide/bin/activate
          
          # Install build123d and run tests
          pip install -vvv --index-url "$package_file_url" --extra-index-url "https://pypi.org/simple" -r requirements-stable.txt
          python test.py | tee -a test.log
          
          # TODO: Check if the tests passed (for now allow failures)

      - uses: "actions/upload-artifact@v4"
        with:
          name: "test-build123d-integration-log"
          path: "build123d/test.log"

  deploy_package_index:
    needs: "test_build123d_integration"
    if: "github.ref == 'refs/heads/master'"
    runs-on: "ubuntu-24.04"
    steps:
      - uses: "actions/checkout@v4"
        with:
          ref: "gh-pages"

      - uses: "actions/download-artifact@v4"
        with:
          name: "package-index"
          path: "."

      - run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -v .
          git commit -m "Update package index" || echo "No changes to commit"
          git push origin gh-pages

  # TODO: deploy_wheels_to_pypi: (doesn't support WebAssembly)
